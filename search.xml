<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaWebProject1</title>
    <url>/2024/05/01/JavaWebProject1/</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h2 id="开发重点"><a href="#开发重点" class="headerlink" title="开发重点"></a>开发重点</h2><p>注解的作用</p>
<h2 id="报错信息解决"><a href="#报错信息解决" class="headerlink" title="报错信息解决"></a>报错信息解决</h2><p><a class="link"   href="https://blog.csdn.net/qq_43429800/article/details/113759264" >vue create 报错解决办法<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://blog.csdn.net/li1325169021/article/details/116504432" >vue项目如何重命名（亲测有效）<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/04/01/hello-world/</url>
    <content><![CDATA[<p>The World Begins Here</p>
<span id="more"></span>
<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>Ubuntu开发工作</title>
    <url>/2024/06/07/Ubuntu%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C/</url>
    <content><![CDATA[<p>ubuntu服务器开发配置</p>
<span id="more"></span>

<p>如果你不想每次登录服务器时输入密码，可以使用 SSH 密钥对进行无密码登录。以下是设置步骤：</p>
<h2 id="新建用户组"><a href="#新建用户组" class="headerlink" title="新建用户组"></a>新建用户组</h2><p>在 Ubuntu 上使用其他用户账户创建一个新用户并赋予 sudo 权限，可以按照以下步骤操作：</p>
<h3 id="步骤-1：登录到现有账户"><a href="#步骤-1：登录到现有账户" class="headerlink" title="步骤 1：登录到现有账户"></a>步骤 1：登录到现有账户</h3><p>首先，使用现有的具有 sudo 权限的账户登录到 Ubuntu 服务器。</p>
<h3 id="步骤-2：创建新用户"><a href="#步骤-2：创建新用户" class="headerlink" title="步骤 2：创建新用户"></a>步骤 2：创建新用户</h3><p>使用 <code>adduser</code> 命令创建一个新用户。例如，创建一个名为 <code>newuser</code> 的用户：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo adduser newuser</span><br></pre></td></tr></table></figure></div>

<p>系统会提示你输入新用户的密码和其他信息（如全名、房间号等）。你可以根据需要填写，或者按 Enter 跳过这些信息。</p>
<h3 id="步骤-3：将新用户添加到-sudo-组"><a href="#步骤-3：将新用户添加到-sudo-组" class="headerlink" title="步骤 3：将新用户添加到 sudo 组"></a>步骤 3：将新用户添加到 sudo 组</h3><p>使用 <code>usermod</code> 命令将新用户添加到 <code>sudo</code> 组，以便赋予 sudo 权限：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG sudo newuser</span><br></pre></td></tr></table></figure></div>

<h3 id="步骤-4：验证新用户的-sudo-权限"><a href="#步骤-4：验证新用户的-sudo-权限" class="headerlink" title="步骤 4：验证新用户的 sudo 权限"></a>步骤 4：验证新用户的 sudo 权限</h3><p>切换到新用户并验证是否具有 sudo 权限：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">su - newuser</span><br></pre></td></tr></table></figure></div>

<p>然后尝试运行一个需要 sudo 权限的命令，例如更新包列表：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></div>

<p>系统会提示你输入新用户的密码。输入密码后，如果命令成功执行，则表示新用户已经具有 sudo 权限。</p>
<h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><p>以下是从头到尾的完整示例：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录到现有具有 sudo 权限的账户</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新用户</span></span><br><span class="line">sudo adduser newuser</span><br><span class="line"><span class="comment"># 系统会提示输入新用户的密码和其他信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将新用户添加到 sudo 组</span></span><br><span class="line">sudo usermod -aG sudo newuser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到新用户</span></span><br><span class="line">su - newuser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证 sudo 权限</span></span><br><span class="line">sudo apt update</span><br><span class="line"><span class="comment"># 输入新用户的密码，确认命令是否成功执行</span></span><br></pre></td></tr></table></figure></div>

<p>通过以上步骤，你可以在 Ubuntu 上使用现有账户创建一个新的用户，并赋予该用户 sudo 权限。确保你正确输入了新用户的密码，并且在执行 sudo 命令时使用新用户的密码进行验证。</p>
<h2 id="免密码登录"><a href="#免密码登录" class="headerlink" title="免密码登录"></a>免密码登录</h2><h3 id="步骤-1：生成-SSH-密钥对"><a href="#步骤-1：生成-SSH-密钥对" class="headerlink" title="步骤 1：生成 SSH 密钥对"></a>步骤 1：生成 SSH 密钥对</h3><p>在你的本地计算机上生成一个 SSH 密钥对。如果你已经有一个密钥对，可以跳过这一步。</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>按照提示操作，这将生成一对公钥和私钥，默认保存在 <code>~/.ssh/</code> 目录下。生成密钥时可以按 Enter 键使用默认文件路径，并且可以选择不设置密钥密码。</p>
<h3 id="步骤-2：将公钥复制到服务器"><a href="#步骤-2：将公钥复制到服务器" class="headerlink" title="步骤 2：将公钥复制到服务器"></a>步骤 2：将公钥复制到服务器</h3><p>使用 <code>ssh-copy-id</code> 命令将公钥复制到服务器上的新用户账户。如果新用户账户名为 <code>newuser</code>，服务器地址为 <code>your_server_ip</code>：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-copy-id newuser@your_server_ip</span><br></pre></td></tr></table></figure></div>

<p>这将提示你输入新用户的密码，并自动将公钥添加到服务器上的 <code>~/.ssh/authorized_keys</code> 文件中。</p>
<h3 id="步骤-3：验证无密码登录"><a href="#步骤-3：验证无密码登录" class="headerlink" title="步骤 3：验证无密码登录"></a>步骤 3：验证无密码登录</h3><p>现在你可以尝试无密码登录到服务器：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ssh newuser@your_server_ip</span><br></pre></td></tr></table></figure></div>

<p>如果一切设置正确，你应该能够直接登录到服务器，而无需输入密码。</p>
<h3 id="手动复制公钥（如果-ssh-copy-id-不可用）"><a href="#手动复制公钥（如果-ssh-copy-id-不可用）" class="headerlink" title="手动复制公钥（如果 ssh-copy-id 不可用）"></a>手动复制公钥（如果 <code>ssh-copy-id</code> 不可用）</h3><p>如果没有 <code>ssh-copy-id</code> 命令，可以手动复制公钥到服务器。</p>
<ol>
<li><p><strong>在本地计算机上显示公钥内容：</strong></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>登录到服务器并创建 <code>.ssh</code> 目录（如果尚未创建）：</strong></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ssh newuser@your_server_ip</span><br><span class="line"><span class="built_in">mkdir</span> -p ~/.ssh</span><br><span class="line"><span class="built_in">chmod</span> 700 ~/.ssh</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>编辑或创建 <code>authorized_keys</code> 文件：</strong></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">nano ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>将本地计算机上显示的公钥内容复制到 <code>authorized_keys</code> 文件中，保存并关闭文件：</strong></p>
<p>将 <code>id_rsa.pub</code> 的内容粘贴到 <code>authorized_keys</code> 文件中。</p>
</li>
<li><p><strong>设置合适的权限：</strong></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="完整步骤示例"><a href="#完整步骤示例" class="headerlink" title="完整步骤示例"></a>完整步骤示例</h3><ol>
<li><p><strong>在本地计算机上生成 SSH 密钥对：</strong></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>将公钥复制到服务器：</strong></p>
 <div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-copy-id newuser@your_server_ip</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>验证无密码登录：</strong></p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">ssh newuser@your_server_ip</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>通过这些步骤，你可以设置无密码登录到服务器，简化登录过程并提高安全性。确保妥善保管你的私钥，不要将其泄露给他人。</p>
<h2 id="ubuntu服务器克隆github故障"><a href="#ubuntu服务器克隆github故障" class="headerlink" title="ubuntu服务器克隆github故障"></a>ubuntu服务器克隆github故障</h2><p><a class="link"   href="https://www.cnblogs.com/CWZhou/p/16474048.html" >小记——Linux下使用git clone总是失败 - 幻梦翱翔 - 博客园 (cnblogs.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global url.<span class="string">&quot;https://&quot;</span>.insteadOf git://</span><br></pre></td></tr></table></figure></div>
<h2 id="WSL和深度学习环境配置"><a href="#WSL和深度学习环境配置" class="headerlink" title="WSL和深度学习环境配置"></a>WSL和深度学习环境配置</h2><p><a class="link"   href="https://blog.csdn.net/2303_80346267/article/details/140112852" >【操作与配置】Linux的CPU深度学习环境-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/06/07/Ubuntu%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C/image-20240709132536611.png"
                     
                ><br>可以参考<a href="#env">激活Anaconda</a><br>在执行上述命令后，出现 <code>conda: command not found</code> 错误通常是因为 Miniconda 的路径没有正确添加到你的系统环境变量中。以下是一些可能的解决方法：</p>
<ol>
<li><p><strong>手动添加环境变量</strong>：<br>打开你的 <code>.bashrc</code> 文件，并确保以下内容添加到文件末尾：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=&quot;$HOME/miniconda3/bin:$PATH&quot;</span><br></pre></td></tr></table></figure></div>
<p>然后保存文件并执行以下命令使其生效：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>检查是否初始化了 bash</strong>：<br>在执行 <code>~/miniconda3/bin/conda init bash</code> 后，确保你已经重新启动了终端窗口或者执行了 <code>source ~/.bashrc</code> 或 <code>source ~/.bash_profile</code>，以确保初始化的更改生效。</p>
</li>
<li><p><strong>检查 Miniconda 安装路径</strong>：<br>确保你的 Miniconda 确实安装在 <code>~/miniconda3</code> 目录下，这是你的 <code>wget</code> 命令下载并安装的路径。</p>
</li>
<li><p><strong>重新安装 Miniconda</strong>：<br>如果以上步骤都没有解决问题，可以尝试重新安装 Miniconda，并确保在安装后按照上述步骤添加了环境变量。</p>
</li>
</ol>
<p>请尝试这些步骤中的一种，并确保在每次更改后重新打开一个新的终端窗口以使更改生效。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/06/07/Ubuntu%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C/image-20240709135152707.png"
                     
                ><br>超时报错：<br>在<code>pip</code>命令后加<code>-i https://pypi.tuna.tsinghua.edu.cn/simple</code><br>报错：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/06/07/Ubuntu%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C/image-20240717095858649.png"
                     
                ></p>
<p><a class="link"   href="https://blog.csdn.net/Z_zahowei/article/details/138421413#:~:text=%E5%BD%93%E4%BD%A0%E5%9C%A8%E4%BD%BF%E7%94%A8%20conda%20%E6%97%B6%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%87%BA%E7%8E%B0%22%20condaerror%3A%20Runcondainit%20before%20condaactivate%20%22%E7%9A%84%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA%EF%BC%8C%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%E4%BD%A0%E7%9A%84,condainit%20%60%60%60%203.%20%E7%AD%89%E5%BE%85%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%EF%BC%8C%E8%AE%A9%20conda%20%E5%AE%8C%E6%88%90%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B%E3%80%82%204.%20%E9%87%8D%E6%96%B0%E5%90%AF%E5%8A%A8%E7%BB%88%E7%AB%AF%E6%88%96%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6%E7%AA%97%E5%8F%A3%E3%80%82" >conda activate 报错 CondaError: Run ‘conda init‘ before ‘conda activate‘_condaerror: run ‘conda init’ before ‘conda activat-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>在Ubuntu上安装Anaconda，可以按照以下步骤操作：</p>
<h3 id="1-下载Anaconda安装包"><a href="#1-下载Anaconda安装包" class="headerlink" title="1. 下载Anaconda安装包"></a>1. 下载Anaconda安装包</h3><p>首先，前往Anaconda官网（<a class="link"   href="https://www.anaconda.com/products/distribution#download-section" >Anaconda Downloads<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>）下载适合Linux系统的Anaconda安装脚本。或者，您可以使用 <code>wget</code> 命令直接下载：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载Anaconda最新版本的安装脚本</span></span><br><span class="line">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></div>
<h3 id="2-验证下载的安装包"><a href="#2-验证下载的安装包" class="headerlink" title="2. 验证下载的安装包"></a>2. 验证下载的安装包</h3><p>为了确保下载文件的完整性，可以验证文件的SHA-256校验和。首先，从Anaconda官网获取校验和，然后运行以下命令：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sha256sum</span> Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></div>
<h3 id="3-运行安装脚本"><a href="#3-运行安装脚本" class="headerlink" title="3. 运行安装脚本"></a>3. 运行安装脚本</h3><p>下载完成后，运行安装脚本：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">bash Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure></div>
<h3 id="4-按照安装向导完成安装"><a href="#4-按照安装向导完成安装" class="headerlink" title="4. 按照安装向导完成安装"></a>4. 按照安装向导完成安装</h3><p>运行安装脚本后，您会看到Anaconda安装向导。按照提示完成安装：</p>
<ol>
<li>阅读并接受许可协议。</li>
<li>选择安装位置（默认为 <code>~/anaconda3</code>）。</li>
<li>选择是否初始化Anaconda并修改您的 <code>~/.bashrc</code> 文件。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/06/07/Ubuntu%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C/image-20240706223532413.png"
                     
                ></li>
</ol>
<h3 id="5-激活Anaconda"><a href="#5-激活Anaconda" class="headerlink" title="5. 激活Anaconda"></a>5. 激活Anaconda<a id="env"></a></h3><p>如果在安装过程中选择初始化Anaconda，则安装程序会自动修改您的 <code>~/.bashrc</code> 文件，添加Anaconda的路径。如果没有选择初始化，您可以手动添加以下内容到 <code>~/.bashrc</code> 文件：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 .bashrc 文件末尾添加以下行</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$HOME</span>/anaconda3/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>然后，运行以下命令以使更改生效：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></div>
<h3 id="6-验证安装"><a href="#6-验证安装" class="headerlink" title="6. 验证安装"></a>6. 验证安装</h3><p>安装完成后，您可以运行以下命令来验证Anaconda是否安装成功：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure></div>
<p>这将显示安装的Conda版本。</p>
<h3 id="7-更新Conda"><a href="#7-更新Conda" class="headerlink" title="7. 更新Conda"></a>7. 更新Conda</h3><p>最后，建议您更新Conda到最新版本：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">conda update conda</span><br></pre></td></tr></table></figure></div>
<p>通过以上步骤，您应该能够在Ubuntu上成功安装Anaconda。如果您有任何问题，请随时告诉我。</p>
<p><a class="link"   href="https://blog.csdn.net/wangtcCSDN/article/details/137950545" >Windows Subsystem for Linux (WSL) 最新详细安装教程-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://blog.csdn.net/weixin_37210821/article/details/115440535?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172027475616800226521783%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=172027475616800226521783&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-115440535-null-null.142%5Ev100%5Epc_search_result_base7&utm_term=wsl%E8%BF%81%E7%A7%BB%E5%88%B0d%E7%9B%98&spm=1018.2226.3001.4187" >WSL1 和 WSL2 从C盘 导入到 D盘_wsl迁移到d盘-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://blog.csdn.net/m0_68736501/article/details/129280962" >WSL重置，打开就报错LocalState\ext4.vhdx‘找不到_wsl子系统ext4.vhdx打开报错:磁盘映像未初始化,包含无法识别的分区,或包含尚未分-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://blog.csdn.net/sexyluna/article/details/105007828" >windows连接WSL-ubuntu里安装的MySQL，附安装教程_wsl ubuntu 如何连接 window上安装的数据库-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://blog.csdn.net/weixin_42580217/article/details/122583888" >在windows下远程调用、连接（navicat）wsl2中 mysql 8.* 的详细步骤_wsl如何通过navicate连接mysql-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://blog.csdn.net/qq_41932665/article/details/108929051" >VS Code server for WSL closed unexpectedly check WSL terminal for more details_vs code server for wsl closed unexpectedly. check -CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="用户环境管理"><a href="#用户环境管理" class="headerlink" title="用户环境管理"></a>用户环境管理</h2><p>是的，同时使用两个 Miniconda 安装是可行的，但需要一些配置来避免冲突。以下是一些步骤和注意事项，以便你可以在不同的上下文中使用这两个 Miniconda 安装：</p>
<h3 id="1-配置环境变量"><a href="#1-配置环境变量" class="headerlink" title="1. 配置环境变量"></a>1. 配置环境变量</h3><p>确保每个 Miniconda 安装的路径都正确配置在不同的环境中，而不会相互干扰。</p>
<h4 id="在用户环境中使用-Miniconda"><a href="#在用户环境中使用-Miniconda" class="headerlink" title="在用户环境中使用 Miniconda"></a>在用户环境中使用 Miniconda</h4><ol>
<li>编辑用户的 <code>.bashrc</code> 或 <code>.bash_profile</code> 文件：<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">nano ~/.bashrc</span><br></pre></td></tr></table></figure></div></li>
<li>添加以下内容来设置 Miniconda 环境变量：<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/dujiafeng/miniconda3/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure></div></li>
<li>保存并关闭文件，然后使更改生效：<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h4 id="在-root-环境中使用-Miniconda"><a href="#在-root-环境中使用-Miniconda" class="headerlink" title="在 root 环境中使用 Miniconda"></a>在 root 环境中使用 Miniconda</h4><ol>
<li>编辑 root 的 <code>.bashrc</code> 或 <code>.bash_profile</code> 文件：<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /root/.bashrc</span><br></pre></td></tr></table></figure></div></li>
<li>添加以下内容来设置 Miniconda 环境变量：<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/root/miniconda3/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure></div></li>
<li>保存并关闭文件，然后使更改生效：<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">source</span> /root/.bashrc</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="2-使用不同的环境文件"><a href="#2-使用不同的环境文件" class="headerlink" title="2. 使用不同的环境文件"></a>2. 使用不同的环境文件</h3><p>为确保在不同用户下使用不同的 Miniconda 环境，可以使用不同的环境文件来激活环境。</p>
<h4 id="在用户环境中激活环境"><a href="#在用户环境中激活环境" class="headerlink" title="在用户环境中激活环境"></a>在用户环境中激活环境</h4><ol>
<li>确保你在用户环境下：<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">su - dujiafeng</span><br></pre></td></tr></table></figure></div></li>
<li>激活环境：<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/miniconda3/bin/activate</span><br><span class="line">conda activate &lt;environment_name&gt;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h4 id="在-root-环境中激活环境"><a href="#在-root-环境中激活环境" class="headerlink" title="在 root 环境中激活环境"></a>在 root 环境中激活环境</h4><ol>
<li>确保你在 root 环境下：<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure></div></li>
<li>激活环境：<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /root/miniconda3/bin/activate</span><br><span class="line">conda activate &lt;environment_name&gt;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="3-创建别名以便切换"><a href="#3-创建别名以便切换" class="headerlink" title="3. 创建别名以便切换"></a>3. 创建别名以便切换</h3><p>为了方便切换，可以在 <code>.bashrc</code> 或 <code>.bash_profile</code> 文件中创建别名。</p>
<h4 id="在用户环境中创建别名"><a href="#在用户环境中创建别名" class="headerlink" title="在用户环境中创建别名"></a>在用户环境中创建别名</h4><ol>
<li>编辑用户的 <code>.bashrc</code> 文件：<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">nano ~/.bashrc</span><br></pre></td></tr></table></figure></div></li>
<li>添加别名：<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> user_conda=<span class="string">&quot;source ~/miniconda3/bin/activate&quot;</span></span><br></pre></td></tr></table></figure></div></li>
<li>保存并关闭文件，然后使更改生效：<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h4 id="在-root-环境中创建别名"><a href="#在-root-环境中创建别名" class="headerlink" title="在 root 环境中创建别名"></a>在 root 环境中创建别名</h4><ol>
<li>编辑 root 的 <code>.bashrc</code> 文件：<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /root/.bashrc</span><br></pre></td></tr></table></figure></div></li>
<li>添加别名：<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> root_conda=<span class="string">&quot;source /root/miniconda3/bin/activate&quot;</span></span><br></pre></td></tr></table></figure></div></li>
<li>保存并关闭文件，然后使更改生效：<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">source</span> /root/.bashrc</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="切换和使用"><a href="#切换和使用" class="headerlink" title="切换和使用"></a>切换和使用</h3><p>现在，你可以使用以下命令在用户和 root 环境中切换和使用 Miniconda：</p>
<ul>
<li><p>在用户环境中：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">user_conda</span><br><span class="line">conda activate &lt;environment_name&gt;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在 root 环境中：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo root_conda</span><br><span class="line">conda activate &lt;environment_name&gt;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>通过这些步骤，你应该能够在不同的环境中使用两个 Miniconda 安装而不会互相干扰。如果有任何问题或需要进一步的帮助，请告诉我。</p>
<p><a class="link"   href="https://blog.csdn.net/single_musketeer/article/details/130309835" >WSL Ubuntu22.04默认用户（default用户）更改_wsl ubuntu切换用户-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://www.cnblogs.com/hg479/p/17869109.html" >解决”wsl: 检测到 localhost 代理配置，但未镜像到 WSL。NAT 模式下的 WSL 不支持 localhost 代理” - JustInCase - 博客园 (cnblogs.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://blog.csdn.net/weixin_48076899/article/details/135214749" >【Linux】自定义WSL2安装位置，安装到其他磁盘(非C盘)_wsl2指定安装路径-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="DATABASE"><a href="#DATABASE" class="headerlink" title="DATABASE"></a>DATABASE</h2><p><a class="link"   href="https://www.sjkjc.com/posts/install-mongodb-on-ubuntu-22/" >在 Ubuntu Server 22 中安装和配置 MongoDB (sjkjc.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>在 WSL (Windows Subsystem for Linux) 中设置 MySQL 服务开机自启动可以通过修改 <code>.bashrc</code> 文件来实现。因为 WSL 没有完整的 <code>systemd</code> 服务管理系统，所以我们需要在用户登录时启动 MySQL 服务。</p>
<h3 id="步骤1：编辑-bashrc-文件"><a href="#步骤1：编辑-bashrc-文件" class="headerlink" title="步骤1：编辑 .bashrc 文件"></a>步骤1：编辑 <code>.bashrc</code> 文件</h3><p>打开你的 <code>.bashrc</code> 文件：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">nano ~/.bashrc</span><br></pre></td></tr></table></figure></div>

<h3 id="步骤2：添加启动-MySQL-服务的命令"><a href="#步骤2：添加启动-MySQL-服务的命令" class="headerlink" title="步骤2：添加启动 MySQL 服务的命令"></a>步骤2：添加启动 MySQL 服务的命令</h3><p>在文件末尾添加以下命令，以便在每次打开 WSL 终端时启动 MySQL 服务：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 MySQL 服务</span></span><br><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure></div>

<p>这行命令将确保每次打开 WSL 终端时，MySQL 服务都会自动启动。</p>
<h3 id="步骤3：保存并关闭-bashrc-文件"><a href="#步骤3：保存并关闭-bashrc-文件" class="headerlink" title="步骤3：保存并关闭 .bashrc 文件"></a>步骤3：保存并关闭 <code>.bashrc</code> 文件</h3><p>按 <code>Ctrl+O</code> 保存文件，然后按 <code>Ctrl+X</code> 退出编辑器。</p>
<h3 id="步骤4：重新加载-bashrc-文件"><a href="#步骤4：重新加载-bashrc-文件" class="headerlink" title="步骤4：重新加载 .bashrc 文件"></a>步骤4：重新加载 <code>.bashrc</code> 文件</h3><p>重新加载 <code>.bashrc</code> 文件，使更改生效：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></div>

<h3 id="确认设置是否生效"><a href="#确认设置是否生效" class="headerlink" title="确认设置是否生效"></a>确认设置是否生效</h3><p>关闭 WSL 终端并重新打开，或者重新启动 WSL，然后检查 MySQL 服务是否已启动：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service mysql status</span><br></pre></td></tr></table></figure></div>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>由于 WSL 的设计特点，每次重启 Windows 或关闭 WSL 会停止所有服务。如果你希望在每次启动 WSL 时自动启动 MySQL，这种方法是有效的。然而，直接通过 <code>.bashrc</code> 文件管理服务可能会导致权限问题。为了解决这些问题，可以使用 <code>sudo</code> 配置不需要密码。</p>
<h3 id="配置-sudo-以不需要密码（可选）"><a href="#配置-sudo-以不需要密码（可选）" class="headerlink" title="配置 sudo 以不需要密码（可选）"></a>配置 <code>sudo</code> 以不需要密码（可选）</h3><ol>
<li><p>编辑 sudoers 文件：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo visudo</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>添加以下行（将 <code>username</code> 替换为你的 WSL 用户名）：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">username ALL=(ALL) NOPASSWD: /usr/sbin/service mysql start</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>这样可以确保在 <code>.bashrc</code> 文件中运行 <code>sudo service mysql start</code> 时不需要输入密码。</p>
<p>通过以上步骤，你可以设置 MySQL 服务在 WSL 启动时自动启动。请注意，这种方法适用于 WSL 环境，并且假设你可以修改 <code>.bashrc</code> 文件和 <code>sudoers</code> 配置。</p>
<h2 id="nginx配置域名"><a href="#nginx配置域名" class="headerlink" title="nginx配置域名"></a>nginx配置域名</h2><p>如果您希望将<a href="http://47.98.121.213:8688的内容通过域名www.welltransai.com访问，那么您有两种选择：">http://47.98.121.213:8688的内容通过域名www.welltransai.com访问，那么您有两种选择：</a></p>
<ol>
<li><p><strong>使用端口80</strong>：将Nginx配置为监听80端口，并通过反向代理将请求转发到8688端口。这是最常见的做法，因为用户无需指定端口号，访问体验更好。</p>
</li>
<li><p><strong>使用端口8688</strong>：直接在Nginx配置中使用8688端口，但用户需要在访问时指定端口号。</p>
</li>
</ol>
<h3 id="方案1：使用端口80并通过反向代理转发到8688"><a href="#方案1：使用端口80并通过反向代理转发到8688" class="headerlink" title="方案1：使用端口80并通过反向代理转发到8688"></a>方案1：使用端口80并通过反向代理转发到8688</h3><p>这是推荐的方案，可以让用户只需访问 <code>http://www.welltransai.com</code>，不需要指定端口号。</p>
<h4 id="步骤-1-编辑Nginx配置文件"><a href="#步骤-1-编辑Nginx配置文件" class="headerlink" title="步骤 1: 编辑Nginx配置文件"></a>步骤 1: 编辑Nginx配置文件</h4><ol>
<li><p><strong>打开Nginx虚拟主机配置文件</strong>：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/welltransai.com</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>添加以下配置</strong>，使用80端口并反向代理到8688端口：</p>
<div class="code-container" data-rel="Nginx"><figure class="iseeu highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.welltransai.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://47.98.121.213:8688;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">    <span class="section">location</span> = /<span class="number">404</span>.html &#123;</span><br><span class="line">        internal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">        internal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h4 id="步骤-2-创建符号链接到sites-enabled目录"><a href="#步骤-2-创建符号链接到sites-enabled目录" class="headerlink" title="步骤 2: 创建符号链接到sites-enabled目录"></a>步骤 2: 创建符号链接到sites-enabled目录</h4><ol>
<li><p><strong>进入sites-enabled目录</strong>：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>创建符号链接</strong>：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /etc/nginx/sites-available/welltransai.com</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h4 id="步骤-3-测试并重新加载Nginx配置"><a href="#步骤-3-测试并重新加载Nginx配置" class="headerlink" title="步骤 3: 测试并重新加载Nginx配置"></a>步骤 3: 测试并重新加载Nginx配置</h4><ol>
<li><p><strong>测试Nginx配置是否正确</strong>：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>如果配置正确，重新加载Nginx</strong>：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl reload nginx</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h4 id="步骤-4-配置域名解析"><a href="#步骤-4-配置域名解析" class="headerlink" title="步骤 4: 配置域名解析"></a>步骤 4: 配置域名解析</h4><ol>
<li><strong>登录到阿里云域名管理控制台</strong>。</li>
<li>**找到您的域名 <code>www.welltransai.com</code>**，并添加一条A记录，指向您的ECS实例IP地址（47.98.121.213）。</li>
</ol>
<p>完成以上步骤后，用户可以通过 <code>http://www.welltransai.com</code> 访问您的静态网页。</p>
<h3 id="方案2：直接使用8688端口"><a href="#方案2：直接使用8688端口" class="headerlink" title="方案2：直接使用8688端口"></a>方案2：直接使用8688端口</h3><p>如果您决定直接使用8688端口，那么在Nginx配置中应设置为8688端口，但用户需要在访问时指定端口号。</p>
<h4 id="编辑Nginx配置文件"><a href="#编辑Nginx配置文件" class="headerlink" title="编辑Nginx配置文件"></a>编辑Nginx配置文件</h4><ol>
<li><p><strong>打开Nginx虚拟主机配置文件</strong>：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/welltransai.com</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>添加以下配置</strong>，使用8688端口：</p>
<div class="code-container" data-rel="Nginx"><figure class="iseeu highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8688</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.welltransai.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /home/zhanyuan/html;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">    <span class="section">location</span> = /<span class="number">404</span>.html &#123;</span><br><span class="line">        internal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">        internal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h4 id="创建符号链接到sites-enabled目录"><a href="#创建符号链接到sites-enabled目录" class="headerlink" title="创建符号链接到sites-enabled目录"></a>创建符号链接到sites-enabled目录</h4><ol>
<li><p><strong>进入sites-enabled目录</strong>：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>创建符号链接</strong>：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /etc/nginx/sites-available/welltransai.com</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h4 id="测试并重新加载Nginx配置"><a href="#测试并重新加载Nginx配置" class="headerlink" title="测试并重新加载Nginx配置"></a>测试并重新加载Nginx配置</h4><ol>
<li><p><strong>测试Nginx配置是否正确</strong>：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>如果配置正确，重新加载Nginx</strong>：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl reload nginx</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h4 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h4><ol>
<li><strong>登录到阿里云域名管理控制台</strong>。</li>
<li>**找到您的域名 <code>www.welltransai.com</code>**，并添加一条A记录，指向您的ECS实例IP地址（47.98.121.213）。</li>
</ol>
<p>完成以上步骤后，用户可以通过 <code>http://www.welltransai.com:8688</code> 访问您的静态网页。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>推荐使用方案1，这样用户无需指定端口号，访问体验更好。方案2虽然简单，但需要用户每次访问时都指定端口号，不太方便。</p>
<h2 id="数据标注"><a href="#数据标注" class="headerlink" title="数据标注"></a>数据标注</h2><p><a class="link"   href="https://blog.csdn.net/m0_67394827/article/details/130007483" >YOLO 算法的自定义数据集制作及模型训练方法（附代码）yolo格式数据集-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://blog.csdn.net/weixin_74319382/article/details/133345842" >使用labelimg框图闪退报错（TypeError: arguments did not match any overloaded call）在以下三行改变 drawrect,drawline 的参数为 int-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="flask上线"><a href="#flask上线" class="headerlink" title="flask上线"></a>flask上线</h2><p>是的，Flask 是一个轻量级的 Python Web 框架，非常适合构建小型应用或 API。将 Flask 应用部署并通过外部访问涉及以下步骤：</p>
<h3 id="1-准备环境"><a href="#1-准备环境" class="headerlink" title="1. 准备环境"></a>1. <strong>准备环境</strong></h3><p>首先，确保你已经安装了 Flask 及其依赖项。如果没有，可以通过以下命令安装：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure></div>

<h3 id="2-创建一个简单的-Flask-应用"><a href="#2-创建一个简单的-Flask-应用" class="headerlink" title="2. 创建一个简单的 Flask 应用"></a>2. <strong>创建一个简单的 Flask 应用</strong></h3><p>这是一个简单的 Flask 应用示例：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="3-运行-Flask-应用"><a href="#3-运行-Flask-应用" class="headerlink" title="3. 运行 Flask 应用"></a>3. <strong>运行 Flask 应用</strong></h3><p>在开发环境中，可以直接运行 Flask 应用：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python app.py</span><br></pre></td></tr></table></figure></div>

<p>这会启动 Flask 服务器，默认在 <code>localhost</code> 的端口 <code>5000</code> 运行。</p>
<h3 id="4-配置外部访问"><a href="#4-配置外部访问" class="headerlink" title="4. 配置外部访问"></a>4. <strong>配置外部访问</strong></h3><p>要使外部设备能够访问你的 Flask 应用，你需要将 <code>host</code> 参数设置为 <code>0.0.0.0</code>，这表示 Flask 应用将监听所有可用的网络接口，而不仅仅是本地回环接口。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="5-配置防火墙和网络"><a href="#5-配置防火墙和网络" class="headerlink" title="5. 配置防火墙和网络"></a>5. <strong>配置防火墙和网络</strong></h3><p>确保你的服务器或主机的防火墙允许外部访问 Flask 应用所使用的端口（例如 <code>5000</code>）。在 Linux 系统中，可以使用 <code>ufw</code> 来打开端口：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 5000</span><br></pre></td></tr></table></figure></div>

<p>如果你在云服务器上部署，如 AWS EC2，确保安全组允许端口 <code>5000</code> 的入站流量。</p>
<h3 id="6-使用生产级-WSGI-服务器"><a href="#6-使用生产级-WSGI-服务器" class="headerlink" title="6. 使用生产级 WSGI 服务器"></a>6. <strong>使用生产级 WSGI 服务器</strong></h3><p>Flask 自带的开发服务器不适合生产环境。在生产环境中，你应该使用 WSGI 服务器（如 <code>gunicorn</code> 或 <code>uWSGI</code>）来运行 Flask 应用，并使用反向代理（如 Nginx）来处理请求。</p>
<p>例如，使用 <code>gunicorn</code> 运行 Flask 应用：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install gunicorn</span><br><span class="line">gunicorn -w 4 -b 0.0.0.0:5000 app:app</span><br></pre></td></tr></table></figure></div>

<p>这里，<code>-w 4</code> 表示使用 4 个工作进程，<code>-b 0.0.0.0:5000</code> 表示绑定到所有网络接口的 5000 端口。</p>
<h3 id="7-配置-Nginx-反向代理"><a href="#7-配置-Nginx-反向代理" class="headerlink" title="7. 配置 Nginx 反向代理"></a>7. <strong>配置 Nginx 反向代理</strong></h3><p>配置 Nginx 反向代理是为了将外部的请求转发给你的 Flask 应用，从而实现更好的性能、安全性以及负载均衡。Nginx 是一个高性能的 HTTP 和反向代理服务器，在生产环境中常用来处理客户端请求，并将请求转发给应用服务器（如 Gunicorn）。</p>
<h3 id="配置步骤："><a href="#配置步骤：" class="headerlink" title="配置步骤："></a>配置步骤：</h3><h4 id="1-安装-Nginx"><a href="#1-安装-Nginx" class="headerlink" title="1. 安装 Nginx"></a>1. <strong>安装 Nginx</strong></h4><p>在大多数 Linux 发行版中，你可以通过包管理器来安装 Nginx。例如，在 Ubuntu 中，可以使用以下命令：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure></div>

<p>安装完成后，你可以使用以下命令启动 Nginx：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></table></figure></div>

<p>你可以检查 Nginx 的状态以确保它正在运行：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure></div>

<h4 id="2-配置-Nginx-反向代理"><a href="#2-配置-Nginx-反向代理" class="headerlink" title="2. 配置 Nginx 反向代理"></a>2. <strong>配置 Nginx 反向代理</strong></h4><p>接下来，你需要配置 Nginx，将它设置为反向代理服务器，使其将收到的请求转发给在 Gunicorn 上运行的 Flask 应用。</p>
<p>在 Nginx 配置目录中，通常位于 <code>/etc/nginx/sites-available/</code>，创建一个新的配置文件。例如，创建一个名为 <code>flask_app</code> 的配置文件：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/nginx/sites-available/flask_app</span><br></pre></td></tr></table></figure></div>

<p>在文件中添加以下内容：</p>
<div class="code-container" data-rel="Nginx"><figure class="iseeu highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;  <span class="comment"># 监听80端口（HTTP默认端口）</span></span><br><span class="line">    <span class="attribute">server_name</span> your_domain_or_IP;  <span class="comment"># 将域名替换为你的域名或服务器的IP地址</span></span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:5000;  <span class="comment"># 将请求转发到本地运行的Gunicorn服务器</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;  <span class="comment"># 保持原始的Host头</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;  <span class="comment"># 保持客户端的IP地址</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;  <span class="comment"># 保持X-Forwarded-For头信息</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;  <span class="comment"># 保持X-Forwarded-Proto头信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h4><ul>
<li><strong>listen 80</strong>: Nginx 将监听端口 80 上的所有请求，这通常是 HTTP 的默认端口。</li>
<li><strong>server_name</strong>: 这是你的服务器的域名或 IP 地址，用于区分不同的虚拟主机。你可以用 <code>your_domain_or_IP</code> 替换为你实际的域名或服务器 IP。</li>
<li><strong>location &#x2F;</strong>: 这定义了根路径下的请求如何处理。<code>/</code> 表示匹配所有路径。</li>
<li><strong>proxy_pass</strong>: 这是最重要的指令，它告诉 Nginx 将匹配的请求转发到 <code>http://127.0.0.1:5000</code>，即在本地端口 5000 上运行的 Gunicorn 服务器。</li>
<li><strong>proxy_set_header</strong>: 这些指令用来设置请求头信息，确保请求信息如客户端 IP 地址等能正确传递给后台服务器。</li>
</ul>
<h4 id="3-启用配置"><a href="#3-启用配置" class="headerlink" title="3. 启用配置"></a>3. <strong>启用配置</strong></h4><p>保存并关闭文件后，需要在 <code>sites-enabled</code> 目录中启用该配置。你可以通过创建符号链接实现这一点：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /etc/nginx/sites-available/flask_app /etc/nginx/sites-enabled</span><br></pre></td></tr></table></figure></div>

<p>然后，测试 Nginx 配置是否正确：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure></div>

<p>如果没有错误，重启 Nginx 以应用新配置：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure></div>

<h4 id="4-打开防火墙端口"><a href="#4-打开防火墙端口" class="headerlink" title="4. 打开防火墙端口"></a>4. <strong>打开防火墙端口</strong></h4><p>确保防火墙允许 HTTP 流量（端口 80）。在 Ubuntu 中，可以使用 <code>ufw</code> 来允许 HTTP 流量：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow <span class="string">&#x27;Nginx Full&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="5-访问你的-Flask-应用"><a href="#5-访问你的-Flask-应用" class="headerlink" title="5. 访问你的 Flask 应用"></a>5. <strong>访问你的 Flask 应用</strong></h4><p>现在，你应该可以通过浏览器访问 <code>your_domain_or_IP</code>，Nginx 将处理请求并将其转发给在 Gunicorn 上运行的 Flask 应用。如果一切配置正确，你的应用应该可以通过外部访问。</p>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>通过配置 Nginx 反向代理，你可以让 Nginx 处理所有外部请求，并将这些请求转发给 Gunicorn 上运行的 Flask 应用。这样做的好处包括更好的性能（Nginx 高效处理静态内容）、增强的安全性（Nginx 作为第一道防线），以及支持更复杂的架构（如负载均衡、SSL 加密等）。</p>
<h3 id="8-使用域名访问（可选）"><a href="#8-使用域名访问（可选）" class="headerlink" title="8. 使用域名访问（可选）"></a>8. <strong>使用域名访问（可选）</strong></h3><p>如果你有一个域名，可以将其指向服务器的 IP 地址，然后通过域名访问你的 Flask 应用。确保 DNS 记录已正确配置，并且 Nginx 配置文件中的 <code>server_name</code> 设置了正确的域名。</p>
<p>要保证 Flask 应用一直运行，通常会使用一个进程管理工具来管理和监控应用。<code>supervisord</code> 是一个常用的工具，可以自动启动、停止和重启应用程序。下面是使用 <code>supervisord</code> 来保证 Flask 应用一直运行的步骤。</p>
<h3 id="1-安装-Supervisord"><a href="#1-安装-Supervisord" class="headerlink" title="1. 安装 Supervisord"></a>1. <strong>安装 Supervisord</strong></h3><p>在 Ubuntu 或 Debian 系统上，你可以使用以下命令安装 <code>supervisor</code>：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install supervisor</span><br></pre></td></tr></table></figure></div>

<h3 id="2-配置-Supervisord-来管理-Flask-应用"><a href="#2-配置-Supervisord-来管理-Flask-应用" class="headerlink" title="2. 配置 Supervisord 来管理 Flask 应用"></a>2. <strong>配置 Supervisord 来管理 Flask 应用</strong></h3><p>创建一个 <code>supervisord</code> 配置文件，来管理你的 Flask 应用。通常，这个配置文件位于 <code>/etc/supervisor/conf.d/</code> 目录下。</p>
<p>创建并编辑配置文件，例如命名为 <code>flask_app.conf</code>：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/supervisor/conf.d/flask_app.conf</span><br></pre></td></tr></table></figure></div>

<p>在文件中添加以下内容：</p>
<div class="code-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[program:flask_app]</span></span><br><span class="line"><span class="attr">command</span>=/path/to/your/venv/bin/gunicorn -w <span class="number">4</span> -b <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">5000</span> app:app</span><br><span class="line"><span class="attr">directory</span>=/path/to/your/flask_app</span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">stderr_logfile</span>=/var/log/flask_app.err.log</span><br><span class="line"><span class="attr">stdout_logfile</span>=/var/log/flask_app.out.log</span><br><span class="line"><span class="attr">user</span>=your_username</span><br><span class="line"><span class="attr">environment</span>=PATH=<span class="string">&quot;/path/to/your/venv/bin&quot;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="解释：-1"><a href="#解释：-1" class="headerlink" title="解释："></a>解释：</h3><ul>
<li><strong>command</strong>: 这是启动 Flask 应用的命令。在这里使用 <code>gunicorn</code> 来运行 Flask 应用，你需要将 <code>/path/to/your/venv/bin/</code> 替换为你的虚拟环境路径，将 <code>app:app</code> 替换为你的 Flask 应用模块和实例名。</li>
<li><strong>directory</strong>: Flask 应用的工作目录。将 <code>/path/to/your/flask_app</code> 替换为你 Flask 应用的路径。</li>
<li><strong>autostart</strong>: 当 <code>supervisord</code> 启动时自动启动 Flask 应用。</li>
<li><strong>autorestart</strong>: 如果 Flask 应用崩溃或被意外终止，<code>supervisord</code> 会自动重新启动它。</li>
<li><strong>stderr_logfile</strong> 和 <strong>stdout_logfile</strong>: 错误日志和标准输出日志的路径，可以帮助你监控应用运行状态。</li>
<li><strong>user</strong>: 运行 Flask 应用的用户，将 <code>your_username</code> 替换为运行应用的用户。</li>
<li><strong>environment</strong>: 用于设置 Flask 应用运行的环境变量，尤其是 <code>PATH</code>，确保 <code>supervisord</code> 能找到虚拟环境中的 <code>gunicorn</code>。</li>
</ul>
<h3 id="3-更新并启动-Supervisord"><a href="#3-更新并启动-Supervisord" class="headerlink" title="3. 更新并启动 Supervisord"></a>3. <strong>更新并启动 Supervisord</strong></h3><p>保存配置文件后，更新 <code>supervisord</code> 配置以加载新的服务：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo supervisorctl reread</span><br><span class="line">sudo supervisorctl update</span><br></pre></td></tr></table></figure></div>

<p>接着启动 Flask 应用：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo supervisorctl start flask_app</span><br></pre></td></tr></table></figure></div>

<h3 id="4-检查应用状态"><a href="#4-检查应用状态" class="headerlink" title="4. 检查应用状态"></a>4. <strong>检查应用状态</strong></h3><p>你可以使用以下命令查看 Flask 应用的状态：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo supervisorctl status flask_app</span><br></pre></td></tr></table></figure></div>



<p>如果你修改了 Flask 应用的代码，通常需要重新启动 Flask 应用，以使更改生效。使用 <code>supervisor</code> 管理 Flask 应用时，有几种方法可以处理这种情况。</p>
<h3 id="1-使用-supervisor-重启-Flask-应用"><a href="#1-使用-supervisor-重启-Flask-应用" class="headerlink" title="1. 使用 supervisor 重启 Flask 应用"></a>1. <strong>使用 <code>supervisor</code> 重启 Flask 应用</strong></h3><p>你可以通过 <code>supervisor</code> 提供的命令来重启 Flask 应用，这样可以确保新的代码生效：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo supervisorctl restart flask_app</span><br></pre></td></tr></table></figure></div>

<p>这将停止并重新启动 Flask 应用程序。<code>flask_app</code> 是你在 <code>supervisor</code> 配置中定义的程序名称。</p>
<h3 id="2-自动重启（选项）"><a href="#2-自动重启（选项）" class="headerlink" title="2. 自动重启（选项）"></a>2. <strong>自动重启（选项）</strong></h3><p>如果你想让应用在代码更改时自动重启，可以使用 <code>supervisor</code> 的 <code>autorestart</code> 选项。该选项已经在你之前的配置中设置为 <code>true</code>，即：</p>
<div class="code-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure></div>

<p>然而，这个配置通常是应用程序崩溃时才会自动重启。如果你想让应用在代码更改时自动重启，需要配合 <code>supervisor</code> 的 <code>reloader</code> 模式（Flask 内置的热加载机制）或使用其他工具（例如 <code>watchdog</code>）来监控文件变动并触发重启。</p>
<h3 id="3-使用-Flask-的-debug-模式（开发环境）"><a href="#3-使用-Flask-的-debug-模式（开发环境）" class="headerlink" title="3. 使用 Flask 的 debug 模式（开发环境）"></a>3. <strong>使用 Flask 的 <code>debug</code> 模式（开发环境）</strong></h3><p>在开发环境中，您可以通过启用 Flask 的 <code>debug</code> 模式来自动重载代码。当代码发生更改时，Flask 应用会自动重新加载。你可以在运行 <code>flask run</code> 或 <code>gunicorn</code> 时通过设置环境变量或在代码中启用 <code>debug</code> 模式。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="4-重新加载-gunicorn"><a href="#4-重新加载-gunicorn" class="headerlink" title="4. 重新加载 gunicorn"></a>4. <strong>重新加载 <code>gunicorn</code></strong></h3><p>如果你使用 <code>gunicorn</code>，也可以通过向 <code>gunicorn</code> 主进程发送信号来触发重载，而不需要完全重启 <code>supervisor</code> 服务。</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -HUP &lt;gunicorn_master_pid&gt;</span><br></pre></td></tr></table></figure></div>

<p>这种方法会平滑重启 <code>gunicorn</code>，使其加载新代码，而不影响当前连接的客户端。</p>
<h3 id="5-强制重启-supervisor-进程"><a href="#5-强制重启-supervisor-进程" class="headerlink" title="5. 强制重启 supervisor 进程"></a>5. <strong>强制重启 <code>supervisor</code> 进程</strong></h3><p>作为最后的手段，你可以通过重启 <code>supervisor</code> 来重启所有由 <code>supervisor</code> 管理的服务：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo supervisorctl restart all</span><br></pre></td></tr></table></figure></div>

<p>不过，这种方法会重启 <code>supervisor</code> 管理的所有进程，可能不是最优的做法。</p>
<p><code>supervisor</code> 本身并不直接支持文件变更监控的重新加载功能，但是你可以通过以下几种方法来实现自动重载代码的功能，类似于 Flask 内置的 <code>reloader</code> 模式。</p>
<h3 id="1-使用-Flask-的-debug-模式"><a href="#1-使用-Flask-的-debug-模式" class="headerlink" title="1. 使用 Flask 的 debug 模式"></a>1. <strong>使用 Flask 的 <code>debug</code> 模式</strong></h3><p>在开发环境中，你可以使用 Flask 的 <code>debug</code> 模式来实现自动重新加载。启用 <code>debug</code> 模式后，Flask 会监控项目中的文件变化，当代码发生变化时，应用会自动重新加载。</p>
<p>在 Flask 代码中，启用 <code>debug</code> 模式如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></div>

<p>这种方法非常适合开发环境，但是不推荐在生产环境中使用，因为 <code>debug</code> 模式下的应用性能较差，且存在安全隐患。</p>
<h3 id="2-使用-gunicorn-的-reload-选项"><a href="#2-使用-gunicorn-的-reload-选项" class="headerlink" title="2. 使用 gunicorn 的 --reload 选项"></a>2. <strong>使用 <code>gunicorn</code> 的 <code>--reload</code> 选项</strong></h3><p>在生产环境中，你可以使用 <code>gunicorn</code> 提供的 <code>--reload</code> 选项，该选项可以监控代码变化并自动重启服务器。这个方法和 Flask 的 <code>debug</code> 模式类似，但适用于生产环境。</p>
<p>配置 <code>supervisor</code> 使用 <code>gunicorn</code> 的 <code>--reload</code> 选项，可以在配置文件中这样写：</p>
<div class="code-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[program:flask_app]</span></span><br><span class="line"><span class="attr">command</span>=/path/to/your/venv/bin/gunicorn --reload -w <span class="number">4</span> -b <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">5000</span> app:app</span><br><span class="line"><span class="attr">directory</span>=/path/to/your/flask_app</span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">stderr_logfile</span>=/var/log/flask_app.err.log</span><br><span class="line"><span class="attr">stdout_logfile</span>=/var/log/flask_app.out.log</span><br><span class="line"><span class="attr">user</span>=your_username</span><br><span class="line"><span class="attr">environment</span>=PATH=<span class="string">&quot;/path/to/your/venv/bin&quot;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="3-使用-watchdog-或-watchmedo-自动重启"><a href="#3-使用-watchdog-或-watchmedo-自动重启" class="headerlink" title="3. 使用 watchdog 或 watchmedo 自动重启"></a>3. <strong>使用 <code>watchdog</code> 或 <code>watchmedo</code> 自动重启</strong></h3><p><code>watchdog</code> 是一个 Python 库，用于监控文件系统事件。你可以使用 <code>watchdog</code> 的命令行工具 <code>watchmedo</code> 来监控代码变动并触发 <code>supervisorctl restart</code>。</p>
<p>首先，安装 <code>watchdog</code>：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install watchdog</span><br></pre></td></tr></table></figure></div>

<p>然后，使用以下命令来监控文件变动并重启 <code>supervisor</code> 中的 Flask 应用：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">watchmedo auto-restart --directory=./ --pattern=*.py --recursive -- supervisorctl restart flask_app</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>--directory=./</code>: 指定要监控的目录，通常是你的 Flask 应用目录。</li>
<li><code>--pattern=*.py</code>: 指定监控的文件模式，这里为 <code>.py</code> 文件。</li>
<li><code>--recursive</code>: 递归监控子目录中的文件。</li>
<li><code>supervisorctl restart flask_app</code>: 文件变动时要执行的命令，这里是重启 <code>supervisor</code> 管理的 Flask 应用。</li>
</ul>
<p>你可以将这个命令写入到 <code>supervisor</code> 配置中作为一个独立的任务：</p>
<div class="code-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[program:flask_watcher]</span></span><br><span class="line"><span class="attr">command</span>=watchmedo auto-restart --directory=/path/to/your/flask_app --pattern=*.py --recursive -- supervisorctl restart flask_app</span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">stderr_logfile</span>=/var/log/flask_watcher.err.log</span><br><span class="line"><span class="attr">stdout_logfile</span>=/var/log/flask_watcher.out.log</span><br><span class="line"><span class="attr">user</span>=your_username</span><br></pre></td></tr></table></figure></div>

<h3 id="4-使用-entr-工具"><a href="#4-使用-entr-工具" class="headerlink" title="4. 使用 entr 工具"></a>4. <strong>使用 <code>entr</code> 工具</strong></h3><p><code>entr</code> 是一个简洁的 UNIX 工具，用于监控文件系统的变化。可以通过以下方式使用：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> *.py | entr supervisorctl restart flask_app</span><br></pre></td></tr></table></figure></div>

<p>这将在当前目录下监控所有 <code>.py</code> 文件的变化，一旦发生变化，就会重启 Flask 应用。</p>
<h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. <strong>总结</strong></h3><ul>
<li><strong>开发环境</strong>：使用 Flask 的 <code>debug</code> 模式或 <code>gunicorn</code> 的 <code>--reload</code> 选项。</li>
<li><strong>生产环境</strong>：使用 <code>watchdog</code>（或 <code>watchmedo</code>）、<code>entr</code> 等工具与 <code>supervisor</code> 配合，自动监控代码变动并重启服务。</li>
</ul>
<p>这些方法都能让你的 Flask 应用在代码变更后自动重启，确保最新的代码被立即应用。</p>
]]></content>
  </entry>
  <entry>
    <title>iOS翻墙解决方案</title>
    <url>/2024/05/17/iOS%E7%BF%BB%E5%A2%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>iOS系统使用ChatGPT</p>
<span id="more"></span>
<h2 id="注册美区账号"><a href="#注册美区账号" class="headerlink" title="注册美区账号"></a>注册美区账号</h2><p>参考链接：<a class="link"   href="https://zhuanlan.zhihu.com/p/450898662" >五分钟注册一个美区的iOS账号，不用花钱！ - 知乎 (zhihu.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>但是这个方法太复杂，还要海外账号。<br>打开网址<a class="link"   href="https://appstore.panbaid.com/share/dvzPXGBnVR" >账号分享 (panbaid.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，然后拉到最下面看到：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/17/iOS%E7%BF%BB%E5%A2%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20240520095012176.png"
                     
                >有“可下载【小火箭】的帐号”即可</p>
<h2 id="登录AppleID"><a href="#登录AppleID" class="headerlink" title="登录AppleID"></a>登录AppleID</h2><p>打开app store点击右上角账户，然后拉到最底端<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/17/iOS%E7%BF%BB%E5%A2%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20240520095237973.png"
                     
                ><br>点击退出登录，然后回到最上面登录上面网站里状态正常的账号，如果账号锁定可在网站里点击解锁<br><strong>注意给定账号只能登陆app store，不要在设置里登录icloud，相关提示信息可忽略</strong></p>
<h2 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h2><p>在app store里搜索shadowrocket和chatgpt如下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/17/iOS%E7%BF%BB%E5%A2%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20240520095541106.png"
                     
                ><br>确定chatgpt的开发信息是openai：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/17/iOS%E7%BF%BB%E5%A2%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20240520095625566.png"
                     
                ></p>
<h2 id="导入机场节点"><a href="#导入机场节点" class="headerlink" title="导入机场节点"></a>导入机场节点</h2><p>打开<a class="link"   href="https://web.efcloud.cc/#/stage/dashboard" >仪表盘 - EFCloud<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>登录<br>账号</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">2048009367</span><br></pre></td></tr></table></figure></div>
<p>密码</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">djf312107</span><br></pre></td></tr></table></figure></div>
<p>在仪表盘页面下拉看到<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/17/iOS%E7%BF%BB%E5%A2%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20240520095910413.png"
                     
                ><br>点击shadowrocket订阅跳转软件，导入之后把右上角按钮打开<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/17/iOS%E7%BF%BB%E5%A2%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20240520100153818.png"
                     
                ><br>点击连通性测试后会显示节点状况，数字越小代表连接越快，当前节点断联可使用其他节点。<br>可以打开“全局路由”使用“启用回退”。</p>
<h2 id="使用gpt"><a href="#使用gpt" class="headerlink" title="使用gpt"></a>使用gpt</h2><p>打开chatgpt<br>使用邮箱登录<br>账号</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tvvDkt7O2azAm4t@hotmail.com</span><br></pre></td></tr></table></figure></div>
<p>密码</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">xzGCQwhS0MM4</span><br></pre></td></tr></table></figure></div>
<p>这是我租的和其他人共享的账号，可以在上方选择使用gpt-4o，效果比gpt4好<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/17/iOS%E7%BF%BB%E5%A2%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20240520100623995.png"
                     
                ><br>登陆成功即可<br>完成问答之后可选择将记录归档<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/17/iOS%E7%BF%BB%E5%A2%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20240520100655682.png"
                     
                ></p>
<p>并点击左下角账号设置中找到<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/05/17/iOS%E7%BF%BB%E5%A2%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20240520100723288.png"
                     
                ></p>
]]></content>
  </entry>
  <entry>
    <title>工作笔记</title>
    <url>/2024/03/31/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>生产力工具合集</p>
<span id="more"></span>
<h2 id="GitHub使用"><a href="#GitHub使用" class="headerlink" title="GitHub使用"></a>GitHub使用</h2><h2 id="自动补全代码"><a href="#自动补全代码" class="headerlink" title="自动补全代码"></a>自动补全代码</h2><p>VSCode 的插件 Fitten Code 是由非十大模型驱动的 AI 编程助手，它可以自动生成代码，提升开发效率，帮您调试 Bug，节省您的时间， 另外还可以对话聊天，解决您编程碰到的问题。<br>Fitten Code 免费且支持 80 多种语言：Python、C++、Javascript、Typescript、Java等。</p>
<ul>
<li><a href="#section1">安装</a></li>
</ul>
<h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装<a id="section1"></a></h3><p>如果您已经安装 VSCode 且版本大于等于1.68.0，请直接跳过此步骤，否则请点击<a class="link"   href="https://code.visualstudio.com/download" >下载<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>前往官网下载安装 VSCode。<br>打开 VSCode，点击左侧 <font style="background:lightgray;border-radius:5px"><strong>Extensions</strong>（扩展）</font>按钮：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/03/31/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/image-20240331143310976.png"
                     
                ><br>在搜索框中搜索关键字 <font style="background:lightgray;border-radius:5px">Fitten Code</font>：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/03/31/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/image-20240331143320676.png"
                     
                ><br>在搜索结果中点击 <font style="background:lightgray;border-radius:5px">Install</font>：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/03/31/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/image-20240331143331434.png"
                     
                ><br>登录注册后即可开始使用：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/03/31/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/image-20240331144116360.png"
                     
                ></p>
<h3 id="2、智能补全"><a href="#2、智能补全" class="headerlink" title="2、智能补全"></a>2、智能补全</h3>]]></content>
  </entry>
  <entry>
    <title>问题解决</title>
    <url>/2024/04/03/%E4%BB%A3%E7%A0%81%E6%8E%A8%E9%80%81/</url>
    <content><![CDATA[<span id="more"></span>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;all&quot;</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>


<p><figure class="image-caption"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/04/03/%E4%BB%A3%E7%A0%81%E6%8E%A8%E9%80%81/image-20250409112548772.png"
                      alt="||400"
                ><figcaption>||400</figcaption></figure></p>
<p>\blog\themes\redefine\source\audios<br>\blog\themes\redefine\source\images<br>\blog\themes\redefine\source\js\sakura.js</p>
]]></content>
  </entry>
  <entry>
    <title>算法笔记</title>
    <url>/2024/04/24/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>算法学习+刷题笔记</p>
<span id="more"></span>
<p><a href="/2024/03/31/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0">跳转</a></p>
<h3 id="购物单"><a href="#购物单" class="headerlink" title="购物单"></a>购物单</h3><p>参考<a class="link"   href="https://www.cnblogs.com/Candycan/p/14810910.html" >【❤重点❤】【牛客网 - 华为机试】HJ16 购物单——动态规划 - your_棒棒糖 - 博客园 (cnblogs.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="密码验证合格程序"><a href="#密码验证合格程序" class="headerlink" title="密码验证合格程序"></a>密码验证合格程序</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) &lt;= <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    a, b, c, d = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= <span class="built_in">ord</span>(item) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">            a = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= <span class="built_in">ord</span>(item) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">            b = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) &lt;= <span class="built_in">ord</span>(item) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>):</span><br><span class="line">            c = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            d = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> a + b + c + d &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)-<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s.split(s[i:i+<span class="number">3</span>])) &gt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;OK&#x27;</span> <span class="keyword">if</span> check(<span class="built_in">input</span>()) <span class="keyword">else</span> <span class="string">&#x27;NG&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="合唱队"><a href="#合唱队" class="headerlink" title="合唱队"></a>合唱队</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取最大增长子序列</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_max_up_sub_arr</span>(<span class="params">count, arr</span>):</span><br><span class="line">    up_arr = [<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(count)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[i]:</span><br><span class="line">                up_arr[i] = <span class="built_in">max</span>(up_arr[i], up_arr[j]+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> up_arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        count = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">        arr = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)))</span><br><span class="line">        left_up_arr = get_max_up_sub_arr(count, arr)</span><br><span class="line">        right_up_arr = get_max_up_sub_arr(count, arr[::-<span class="number">1</span>])[::-<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(count - <span class="built_in">max</span>(i + j - <span class="number">1</span> <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(left_up_arr, right_up_arr)))</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
  </entry>
  <entry>
    <title>从零开始搭建个人博客</title>
    <url>/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>1本人使用GitHub+Hexo+Vercel搭建博客</p>
<span id="more"></span>
<ul>
<li><a href="#section1">注册GitHub</a></li>
<li><a href="#section2">安装Git</a></li>
<li><a href="#section3">绑定GitHub</a></li>
<li><a href="#section4">购买域名</a></li>
<li><a href="#section5">安装node.js和Hexo</a></li>
<li><a href="#section6">解析域名</a></li>
<li><a href="#section7">设置next主题</a></li>
<li><a href="#section8">优化主题</a><ol>
<li><a href="#section8.1">设置菜单</a></li>
<li><a href="#section8.2">设置建站时间</a></li>
<li><a href="#section8.3">设置头像</a></li>
<li><a href="#section8.4">网站图标设置</a></li>
<li><a href="#section8.5">设置动态背景</a></li>
<li><a href="#section8.6">设置背景图片</a></li>
<li><a href="#section8.7">主页文章添加阴影效果</a></li>
<li><a href="#section8.8">添加顶部加载条</a></li>
<li><a href="#section8.9">设置预览摘要</a></li>
<li><a href="#section8.10">设置侧边栏显示效果</a></li>
<li><a href="#section8.11">侧边栏推荐阅读</a></li>
<li><a href="#section8.12">添加社交链接</a></li>
<li><a href="#section8.13">设置博文内链接为蓝色</a></li>
<li><a href="#section8.14">显示文章字数和阅读时长</a></li>
<li><a href="#section8.15">显示站点文章总字数（另一种统计站点总字数的方法）</a></li>
<li><a href="#section8.16">设置文章末尾”本文结束”标记</a></li>
<li><a href="#section8.17">文章末尾添加版权说明</a></li>
<li><a href="#section8.18">添加访问量统计</a></li>
<li><a href="#section8.19">添加评论功能</a></li>
<li><a href="#section8.20">添加Fork me on Github</a></li>
<li><a href="#section8.21">安装Markdown编译器</a></li>
<li><a href="#section8.22">安装RSS插件</a></li>
<li><a href="#section8.23">项目主页添加README</a></li>
<li><a href="#section8.24">忽略要编译的文件</a></li>
<li><a href="#section8.25">代码块样式自定义</a></li>
<li><a href="#section8.26">支持mathjax公式</a></li>
<li><a href="#section8.27">图床网站</a></li>
<li><a href="#section8.28">本地搜索</a></li>
<li><a href="#section8.29">Hexo博客提交百度和Google收录</a></li>
<li><a href="#section8.30">博文置顶</a></li>
<li><a href="#section8.31">添加打赏</a></li>
<li><a href="#section8.32">添加分享（未完成）</a></li>
<li><a href="#section8.33">图片可点击放大查看，放大后可关闭（fancybox可能有点问题，暂时未实现）</a></li>
</ol>
</li>
<li><a href="#section9">参考</a></li>
</ul>
<h2 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub<a id="section1"></a></h2><p>打开网站<a class="link"   href="https://github.com/" >GitHub: Let’s build from here · GitHub<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240522083055223.png"
                     
                ><br>点击右上角sign up，然后正常输入邮箱，密码，用户名<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240522083610769.png"
                     
                ><br>然后需要做真人验证和邮箱验证，看到以下页面即成功<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240522084105467.png"
                     
                ><br>然后可以选择学生优惠（待更新）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240522084355370.png"
                     
                ><br>完成登陆之后可以打开<br>在code这里download zip<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240522091920079.png"
                     
                ></p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git<a id="section2"></a></h2><h2 id="绑定GitHub"><a href="#绑定GitHub" class="headerlink" title="绑定GitHub"></a>绑定GitHub<a id="section3"></a></h2><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名<a id="section4"></a></h2><h2 id="安装node-js和Hexo"><a href="#安装node-js和Hexo" class="headerlink" title="安装node.js和Hexo"></a>安装node.js和Hexo<a id="section5"></a></h2><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名<a id="section6"></a></h2><h2 id="设置next主题"><a href="#设置next主题" class="headerlink" title="设置next主题"></a>设置next主题<a id="section7"></a></h2><p>我使用的是next(v7.7.1)，<a class="link"   href="https://link.zhihu.com/?target=https://github.com/theme-next/hexo-theme-next" >下载地址<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>打开博客根目录Blog文件夹，右键Git Bash，输入如下代码将next主题下载到目录Blog&#x2F;themes：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240331185411128.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240331185430936.png"
                     
                ></p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 归墟</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description: &#x27;&#x27;</span><br><span class="line">keywords:</span><br><span class="line">author: 杜佳峰</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next   #主题改为next</span><br></pre></td></tr></table></figure></div>
<p>主题语言主要是看你的themes&#x2F;next&#x2F;language中的简体中文是 zh-CN 还是 zh-Hans：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240331185824263.png"
                     
                ><br>next主题有四种，如下依次为Muse、Mist、Pisces、Gemini ：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240331190108688.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240331190127512.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240331190142512.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240331190155760.png"
                     
                ><br>我选的是Gemini，打开目录Blog&#x2F;themes&#x2F;next&#x2F;下的_config.yml（称为<strong>主题配置文件</strong>），只要将你选的主题前的#删除就行了：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure></div>
<p>回到根目录打开Git Bash，输入如下三条命令：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>
<p>完成后打开你的博客：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240331190814946.png"
                     
                ><br>附：<br>1、如果hexo s看的到样式，在github访问的时候看不到样式，在根目录下的_config.yml的最后的</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repository: &#x27;&#x27;</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></div>
<p>更改为</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">type: git  </span><br><span class="line">repository: &#x27;&#x27;  </span><br><span class="line">branch: main  </span><br></pre></td></tr></table></figure></div>
<p>再 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p>
<h2 id="优化主题"><a href="#优化主题" class="headerlink" title="优化主题"></a>优化主题<a id="section8"></a></h2><h3 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单<a id="section8.1"></a></h3><p>打开主题配置文件即themes&#x2F;next下的_config.yml，查找menu，将前面的#删除就行了：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  #home: / || fa fa-home</span><br><span class="line">  #about: /about/ || fa fa-user</span><br><span class="line">  #tags: /tags/ || fa fa-tags</span><br><span class="line">  #categories: /categories/ || fa fa-th</span><br><span class="line">  #archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br><span class="line">  home: / || home                      #首页</span><br><span class="line">  archives: /archives/ || archive      #归档</span><br><span class="line">  categories: /categories/ || th       #分类</span><br><span class="line">  tags: /tags/ || tags                 #标签</span><br><span class="line">  about: /about/ || user               #关于</span><br><span class="line">  resources: /resources/ || download   #资源</span><br><span class="line">  schedule: /schedule/ || calendar    #日历</span><br><span class="line">  sitemap: /sitemap.xml || sitemap    #站点地图，供搜索引擎爬取</span><br><span class="line">  commonweal: /404/ || heartbeat      #腾讯公益404</span><br></pre></td></tr></table></figure></div>
<p>“||”前面的是目标链接，后面的是图标名称，next使用的图标全是<a class="link"   href="https://link.zhihu.com/?target=http://www.fontawesome.com.cn/faicons/%23web-application" >图标库 - Font Awesome 中文网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>这一网站的，有想用的图标直接在fontawesome上面找图标的名称就行。resources是我自己添加的。<br>新添加的菜单需要翻译对应的中文，打开theme&#x2F;next&#x2F;languages&#x2F;zh-CN.yml，在menu下设置：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  resources: 资源</span><br><span class="line">  search: 搜索</span><br><span class="line">  schedule: 日程表</span><br><span class="line">  sitemap: 站点地图</span><br><span class="line">  commonweal: 公益 404</span><br></pre></td></tr></table></figure></div>
<p>在根目录下打开Git Bash，输入如下代码：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;about&quot;</span><br><span class="line">hexo new page &quot;resources&quot;</span><br></pre></td></tr></table></figure></div>
<p>此时在根目录的sources文件夹下会生成categories、tags、about、resources四个文件，每个文件中有一个<code>index.md</code>文件，修改内容分别如下：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2024-01-21 21:29:38</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2024-01-21 21:29:48</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 关于</span><br><span class="line">date: 2024-01-21 21:29:57</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 资源</span><br><span class="line">date: 2024-01-21 21:30:04</span><br><span class="line">type: &quot;resources&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure></div>
<p>注：如果有启用评论，默认页面带有评论。需要关闭的话，添加字段comments并将值设置为false。</p>
<h3 id="设置建站时间"><a href="#设置建站时间" class="headerlink" title="设置建站时间"></a>设置建站时间<a id="section8.2"></a></h3><p>打开主题配置文件即themes&#x2F;next下的_config.yml，查找since：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup. If not defined, current year will be used.</span><br><span class="line">  since: 2024-01</span><br></pre></td></tr></table></figure></div>
<h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像<a id="section8.3"></a></h3><p>打开主题配置文件即themes&#x2F;next下的_config.yml，查找avatar，url后是图片的链接地址：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: /images/avatar.jpg  #图片的位置，位于/next/source/images文件下下，也可以是http://xxx.com/avatar.png</span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line">  rounded: true  #头像展示在圈里</span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: false  #头像随光标旋转</span><br></pre></td></tr></table></figure></div>
<p>然后将你要的头像图片复制到themes&#x2F;next&#x2F;source&#x2F;images里，重命名为avatar.jpg。</p>
<h3 id="网站图标设置"><a href="#网站图标设置" class="headerlink" title="网站图标设置"></a>网站图标设置<a id="section8.4"></a></h3><p>我是在这个网站找的图标，免费的图标素材网站：<a class="link"   href="https://link.zhihu.com/?target=https://www.easyicon.net/1220579-maple_leaf_icon.html" >Easyicon<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>下载16x16和32x32的图标后，打开主题配置文件，查找favicon，只要修改small和medium为你的图标路径：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16.png</span><br><span class="line">  medium: /images/favicon-32x32.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br><span class="line">  #android_manifest: /images/manifest.json</span><br><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure></div>
<h3 id="设置动态背景"><a href="#设置动态背景" class="headerlink" title="设置动态背景"></a>设置动态背景<a id="section8.5"></a></h3><h4 id="canvas-nest-风格"><a href="#canvas-nest-风格" class="headerlink" title="canvas nest 风格"></a>canvas nest 风格<a id="section8.5.1"></a></h4><p>在themes&#x2F;next目录下打开Git Bash，输入：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</span><br></pre></td></tr></table></figure></div>
<p>打开主题配置文件即themes&#x2F;next下的_config.yml，找到canvas-nest，将enable：false改为true：（<strong>如果找不到canvas-nest，可能是文件修改了，试试将下面的代码复制粘贴到themes&#x2F;next中</strong>）</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span><br><span class="line"># For more information: https://github.com/hustcc/canvas-nest.js</span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: true</span><br><span class="line">  onmobile: true # Display on mobile or not</span><br><span class="line">  color: &quot;0,0,255&quot; # RGB values, use `,` to separate</span><br><span class="line">  opacity: 0.5 # The opacity of line: 0~1</span><br><span class="line">  zIndex: -1 # z-index property of the background</span><br><span class="line">  count: 99 # The number of lines</span><br></pre></td></tr></table></figure></div>
<h4 id="JavaScript-3D-library风格"><a href="#JavaScript-3D-library风格" class="headerlink" title="JavaScript 3D library风格"></a>JavaScript 3D library风格</h4><p>在themes&#x2F;next目录下打开Git Bash，输入：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-three source/lib/three</span><br></pre></td></tr></table></figure></div>
<p>打开主题配置文件即themes&#x2F;next下的_config.yml，找到three，这里有三种风格，可以试一下看看喜欢哪种风格，直接将false改为true就行了，我已经选了canvas-nest，就没有选这种风格：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line"># JavaScript 3D library.</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-three</span><br><span class="line">three:</span><br><span class="line">  enable: true</span><br><span class="line">  three_waves: false</span><br><span class="line">  canvas_lines: false</span><br><span class="line">  canvas_sphere: false</span><br></pre></td></tr></table></figure></div>
<h3 id="设置背景图片"><a href="#设置背景图片" class="headerlink" title="设置背景图片"></a>设置背景图片<a id="section8.6"></a></h3><p>打开主题配置文件即themes&#x2F;next下的_config.yml，将 style: source&#x2F;_data&#x2F;styles.styl 取消注释：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  style: source/_data/styles.styl</span><br></pre></td></tr></table></figure></div>
<p>打开根目录Blog&#x2F;source创建文件_data&#x2F;styles.styl，添加以下内容：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">// 添加背景图片</span><br><span class="line">body &#123;</span><br><span class="line">      background: url(/images/background.jpg);</span><br><span class="line">      background-size: cover;</span><br><span class="line">      background-repeat: no-repeat;</span><br><span class="line">      background-attachment: fixed;</span><br><span class="line">      background-position: 50% 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后将想要的背景图片放入 themes&#x2F;next&#x2F;source&#x2F;images即可。</p>
<h3 id="主页文章添加阴影效果"><a href="#主页文章添加阴影效果" class="headerlink" title="主页文章添加阴影效果"></a>主页文章添加阴影效果<a id="section8.7"></a></h3><p>打开themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_common&#x2F;components&#x2F;post&#x2F;post.styl，修改.post-block，如下：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">.use-motion &#123;</span><br><span class="line">  if (hexo-config(&#x27;motion.transition.post_block&#x27;)) &#123;</span><br><span class="line">    .post-block &#123;</span><br><span class="line">      opacity: 0;</span><br><span class="line">      margin-top: 60px;</span><br><span class="line">      margin-bottom: 60px;</span><br><span class="line">      padding: 25px;</span><br><span class="line">      background:rgba(255,255,255,0.9) none repeat scroll !important;</span><br><span class="line">      -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">      -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">    &#125;</span><br><span class="line">    .pagination, .comments&#123;</span><br><span class="line">      opacity: 0;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>
<p>还有一种方法打开Blog&#x2F;source&#x2F;_date&#x2F;style.styl文件，添加以下代码：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line">.post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="添加顶部加载条"><a href="#添加顶部加载条" class="headerlink" title="添加顶部加载条"></a>添加顶部加载条<a id="section8.8"></a></h3><p>在themes&#x2F;next目录下打开Git Bash，输入：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-pace source/lib/pace</span><br></pre></td></tr></table></figure></div>
<p>打开<strong>主题配置文件</strong>即themes&#x2F;next下的_config.yml，找到pace，将enable：false改为true，你还可以选择类型（theme）：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">pace:</span><br><span class="line">  enable: true</span><br><span class="line">  # Themes list:</span><br><span class="line">  # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span><br><span class="line">  # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span><br><span class="line">  theme: minimal</span><br></pre></td></tr></table></figure></div>
<h3 id="设置预览摘要"><a href="#设置预览摘要" class="headerlink" title="设置预览摘要"></a>设置预览摘要<a id="section8.9"></a></h3><p>next（v7.7.1）已经没有如下代码：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure></div>
<p>所以不需要设置，只要我们在文章中插入 &lt;!– more –&gt;，该标签之上的是摘要，之后的内容不可见，需点击全文阅读按钮：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure></div>
<h3 id="设置侧边栏显示效果"><a href="#设置侧边栏显示效果" class="headerlink" title="设置侧边栏显示效果"></a>设置侧边栏显示效果<a id="section8.10"></a></h3><p>打开<strong>主题配置文件</strong>即themes&#x2F;next下的_config.yml，找到Sidebar Settings，设置：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  # Sidebar Position.</span><br><span class="line">  position: left</span><br><span class="line">  #position: right</span><br><span class="line"></span><br><span class="line">  # Manual define the sidebar width. If commented, will be default for:</span><br><span class="line">  # Muse | Mist: 320</span><br><span class="line">  # Pisces | Gemini: 240</span><br><span class="line">  #width: 300</span><br><span class="line"></span><br><span class="line">  # Sidebar Display (only for Muse | Mist), available values:</span><br><span class="line">  #  - post    expand on posts automatically. Default.</span><br><span class="line">  #  - always  expand for all pages automatically.</span><br><span class="line">  #  - hide    expand only when click on the sidebar toggle icon.</span><br><span class="line">  #  - remove  totally remove sidebar including sidebar toggle.</span><br><span class="line">  display: post</span><br></pre></td></tr></table></figure></div>
<h3 id="侧边栏推荐阅读"><a href="#侧边栏推荐阅读" class="headerlink" title="侧边栏推荐阅读"></a>侧边栏推荐阅读<a id="section8.11"></a></h3><p>打开<strong>主题配置文件</strong>即themes&#x2F;next下的_config.yml，搜索links（里面写你想要的链接）：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">links_settings:</span><br><span class="line">  icon: link</span><br><span class="line">  title: 链接网站  #修改名称</span><br><span class="line"></span><br><span class="line">links:</span><br><span class="line">  #Title: http://yoursite.com</span><br><span class="line">  百度: https://baidu.com</span><br><span class="line">  鱼C论坛: https://fishc.com.cn</span><br></pre></td></tr></table></figure></div>
<h3 id="添加社交链接"><a href="#添加社交链接" class="headerlink" title="添加社交链接"></a>添加社交链接<a id="section8.12"></a></h3><p>打开<strong>主题配置文件</strong>即themes&#x2F;next下的_config.yml，搜索social：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/chiqiubai || github</span><br><span class="line">  E-Mail: mailto:2048009367@qq.com || envelope</span><br></pre></td></tr></table></figure></div>
<p>“||”前面的是链接，后面的是 <a class="link"   href="https://link.zhihu.com/?target=http://www.fontawesome.com.cn/faicons/%23web-application" >FontAwesome<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>图标名称。</p>
<h3 id="设置博文内链接为蓝色"><a href="#设置博文内链接为蓝色" class="headerlink" title="设置博文内链接为蓝色"></a>设置博文内链接为蓝色<a id="section8.13"></a></h3><p>打开themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_common&#x2F;components&#x2F;post&#x2F;post.styl文件，将下面的代码复制到文件最后：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">.post-body p a&#123;</span><br><span class="line">     color: #0593d3;</span><br><span class="line">     border-bottom: none;</span><br><span class="line">     &amp;:hover &#123;</span><br><span class="line">       color: #0477ab;</span><br><span class="line">       text-decoration: underline;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="显示文章字数和阅读时长（有问题）"><a href="#显示文章字数和阅读时长（有问题）" class="headerlink" title="显示文章字数和阅读时长（有问题）"></a>显示文章字数和阅读时长（有问题）<a id="section8.14"></a></h3><p>从根目录Blog打开Git Bash，执行下面的命令，安装插件：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure></div>
<p>然后打开<strong>站点配置文件，</strong>在文件末尾加上下面的代码：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true                # 文章字数统计</span><br><span class="line">  time: true                   # 文章阅读时长</span><br><span class="line">  total_symbols: true          # 站点总字数统计</span><br><span class="line">  total_time: true             # 站点总阅读时长</span><br><span class="line">  exclude_codeblock: false     # 排除代码字数统计</span><br></pre></td></tr></table></figure></div>
<h3 id="显示站点文章总字数（另一种统计站点总字数的方法）"><a href="#显示站点文章总字数（另一种统计站点总字数的方法）" class="headerlink" title="显示站点文章总字数（另一种统计站点总字数的方法）"></a>显示站点文章总字数（另一种统计站点总字数的方法）<a id="section8.15"></a></h3><p>从根目录Blog打开Git Bash，执行下面的命令，安装插件：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure></div>
<p>然后在&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.swig文件尾部加上：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;theme-info&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div>
<h3 id="设置文章末尾”本文结束”标记"><a href="#设置文章末尾”本文结束”标记" class="headerlink" title="设置文章末尾”本文结束”标记"></a>设置文章末尾”本文结束”标记<a id="section8.16"></a></h3><p>在路径&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:24px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div>
<p>接着打开&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;post.swig文件，在post-footer前添加代码：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% if not is_index and theme.passage_end_tag.enabled %&#125;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></div>
<p>具体位置如下图：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240331212236481.png"
                     
                ><br>然后打开<strong>主题配置文件</strong>（_config.yml)，在末尾添加：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure></div>
<h3 id="文章末尾添加版权说明"><a href="#文章末尾添加版权说明" class="headerlink" title="文章末尾添加版权说明"></a>文章末尾添加版权说明<a id="section8.17"></a></h3><p>查找<strong>主题配置文件</strong>themes&#x2F;next&#x2F;_config.yml中的creative_commons：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: false</span><br><span class="line">  post: true  # 将false改为true即可显示版权信息</span><br><span class="line">  language:</span><br></pre></td></tr></table></figure></div>
<h3 id="添加访问量统计"><a href="#添加访问量统计" class="headerlink" title="添加访问量统计"></a>添加访问量统计<a id="section8.18"></a></h3><p>打开<strong>主题配置文件</strong>即themes&#x2F;next下的_config.yml，找到busuanzi_count，改为true：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></div>
<p>打开&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.swig，在最后添加如下内容：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.busuanzi_count.enable %&#125;</span><br><span class="line">    &lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">    &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;总访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&lt;!-- 不蒜子计数初始值纠正 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line">    var int = setInterval(fixCount, 50);  // 50ms周期检测函数</span><br><span class="line">    var countOffset = 20000;  // 初始化首次数据</span><br><span class="line"></span><br><span class="line">    function fixCount() &#123;            </span><br><span class="line">       if (document.getElementById(&quot;busuanzi_container_site_pv&quot;).style.display != &quot;none&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            $(&quot;#busuanzi_value_site_pv&quot;).html(parseInt($(&quot;#busuanzi_value_site_pv&quot;).html()) + countOffset); </span><br><span class="line">            clearInterval(int);</span><br><span class="line">        &#125;                  </span><br><span class="line">        if ($(&quot;#busuanzi_container_site_pv&quot;).css(&quot;display&quot;) != &quot;none&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            $(&quot;#busuanzi_value_site_uv&quot;).html(parseInt($(&quot;#busuanzi_value_site_uv&quot;).html()) + countOffset); // 加上初始数据 </span><br><span class="line">            clearInterval(int); // 停止检测</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">       	</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能<a id="section8.19"></a></h3><h4 id="注册安装"><a href="#注册安装" class="headerlink" title="注册安装"></a>注册安装</h4><p>我采用的是来必力，具体过程很简单，打开官网：<a class="link"   href="https://link.zhihu.com/?target=http://livere.com/" >Welcome to LiveRe.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>注册账号<br>然后发送邮箱验证码，输入验证码验证，完成注册后点击上方<strong>安装：</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240331213457584.png"
                     
                ><br>选择免费的现在安装，会弹出一个框让你填网站的信息：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240331213514745.png"
                     
                ><br>然后获取代码：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240331213626080.png"
                     
                ><br>将data-uid后的代码复制，然后打开主题配置文件_config.yml，找到livere_uid，将代码复制到其后即可：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">livere_uid: &quot;你的代码&quot;</span><br></pre></td></tr></table></figure></div>
<h4 id="设置提醒"><a href="#设置提醒" class="headerlink" title="设置提醒"></a>设置提醒</h4><p>当有新评论出现时，通过邮箱提醒，点击右上角-&gt;管理页面-&gt;评论提醒：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240401101834986.png"
                     
                ></p>
<h3 id="添加Fork-me-on-Github"><a href="#添加Fork-me-on-Github" class="headerlink" title="添加Fork me on Github"></a>添加Fork me on Github<a id="section8.20"></a></h3><p>有两种，分别是：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240401102124091.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/01/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240401102109338.png"
                     
                ><br>选择你喜欢的类型，打开<a class="link"   href="https://link.zhihu.com/?target=http://tholman.com/github-corners/" >小猫<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>或者<a class="link"   href="https://link.zhihu.com/?target=https://github.blog/2008-12-19-github-ribbons/" >字<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，复制代码添加到themes&#x2F;next&#x2F;layout&#x2F;_layout.swig文件中，放在&lt;div class&#x3D;”headband”&gt;&lt;&#x2F;div&gt;后面：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;a href=&quot;https://github.com/chiqiubai&quot;&gt;&lt;img decoding=&quot;async&quot; width=&quot;149&quot; height=&quot;149&quot; src=&quot;https://github.blog/wp-content/uploads/2008/12/forkme_left_red_aa0000.png?resize=149%2C149&quot; class=&quot;attachment-full size-full&quot; alt=&quot;Fork me on GitHub&quot; loading=&quot;lazy&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></div>
<h3 id="安装Markdown编译器"><a href="#安装Markdown编译器" class="headerlink" title="安装Markdown编译器"></a>安装Markdown编译器<a id="section8.21"></a></h3><p>可以看这篇文章然后选一个适合的文本编译器：<a class="link"   href="https://link.zhihu.com/?target=https://blog.csdn.net/davidhzq/article/details/100815332" >几款主流好用的markdown编辑器介绍<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>我是用的Windows系统，所以我用的是MarkdownPad2，下载地址：<a class="link"   href="https://link.zhihu.com/?target=http://www.markdownpad.com/" >The Markdown Editor for Windows<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，默认安装就行<br>如果是win10系统还需要安装一个组件 <strong>awesomium_v1.6.6_sdk_win</strong>，下载链接：链接：<a class="link"   href="https://link.zhihu.com/?target=https://pan.baidu.com/s/1UJRtOBF8vj19ikOq4452sQ" >https://pan.baidu.com/s/1UJRtOBF8vj19ikOq4452sQ<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 提取码：yd8k<br>下载完<strong>awesomium_v1.6.6_sdk_win</strong>默认安装就行</p>
<h3 id="安装RSS插件"><a href="#安装RSS插件" class="headerlink" title="安装RSS插件"></a>安装RSS插件<a id="section8.22"></a></h3><p>为什么要安装RSS插件呢？不了解的可以看看这篇文章：<a class="link"   href="https://link.zhihu.com/?target=http://www.netshop168.com/article-85934.html" >rss订阅是什么意思?为什么要使用RSS?<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>简单来说，RSS是一种协议，允许网站将其内容或其部分内容提供给其他网站或应用程序。通过使用RSS，可以节省宝贵的时间，并将各个站点提供的新闻和信息组织到一个中心点进行查看，也可以通过从使用RSS联合其内容的其他站点导入新闻来向你的站点添加新闻。</p>
<h4 id="安装hexo-generator-feed插件："><a href="#安装hexo-generator-feed插件：" class="headerlink" title="安装hexo-generator-feed插件："></a>安装hexo-generator-feed插件：</h4><p>RSS需要有一个Feed链接，而这个链接需要靠hexo-generator-feed插件来生成，所以第一步需要添加插件，在Blog根目录打开Git Bash执行安装指令：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></div>
<h4 id="配置feed信息："><a href="#配置feed信息：" class="headerlink" title="配置feed信息："></a>配置feed信息：</h4><p>在<strong>站点配置文件</strong>末尾加上如下代码：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">feed:</span><br><span class="line">  type: rss2</span><br><span class="line">  path: rss2.xml</span><br><span class="line">  limit: 10</span><br><span class="line">  hub:</span><br><span class="line">  content: &#x27;true&#x27;</span><br></pre></td></tr></table></figure></div>
<p>打开<strong>主题配置文件</strong>，搜索rss，将前面的#去掉：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">follow_me:</span><br><span class="line">  #Twitter: https://twitter.com/username || twitter</span><br><span class="line">  #Telegram: https://t.me/channel_name || telegram</span><br><span class="line">  微信: /images/wechat_channel.jpg || wechat</span><br><span class="line">  RSS: /atom.xml || rss</span><br></pre></td></tr></table></figure></div>
<h3 id="项目主页添加README"><a href="#项目主页添加README" class="headerlink" title="项目主页添加README"></a>项目主页添加README<a id="section8.23"></a></h3><h3 id="忽略要编译的文件"><a href="#忽略要编译的文件" class="headerlink" title="忽略要编译的文件"></a>忽略要编译的文件<a id="section8.24"></a></h3><p>搜索引擎确认网站所有权时往往会提供一个html文件来进行验证，要是这个文件被渲染了，验证自然就会失败了。或者，有时候会有一些文件不希望Hexo渲染的，因此有必要针对某个文件或者目录进行排除。Hexo的配置文件中提供了配置项skip_render。只有source目录下的文件才会发布到public（能够在网络上访问到），因此Hexo只渲染source目录下的文件。skip_render参数设置的路径是相对于source目录的路径。</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">skip_render:   #部署时不包含的文件</span><br><span class="line"></span><br><span class="line">#单个文件</span><br><span class="line">skip_render: hello.html</span><br><span class="line"></span><br><span class="line">#单个文件夹下全部文件</span><br><span class="line">skip_render: test/* </span><br><span class="line"></span><br><span class="line">#单个文件夹下指定类型文件</span><br><span class="line">skip_render: test/*.md  </span><br><span class="line"></span><br><span class="line">#单个文件夹下全部文件以及子目录</span><br><span class="line">skip_render: test/**  </span><br><span class="line"></span><br><span class="line">#跳过多个目录，或者多个文件</span><br><span class="line">skip_render: [&#x27;*.html&#x27;, demo/**, test/*]</span><br></pre></td></tr></table></figure></div>
<h3 id="代码块样式自定义"><a href="#代码块样式自定义" class="headerlink" title="代码块样式自定义"></a>代码块样式自定义<a id="section8.25"></a></h3><p>打开根目录Blog&#x2F;source&#x2F;_data&#x2F;styles.styl，添加以下内容：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line">code &#123;</span><br><span class="line">    color: #ff7600;</span><br><span class="line">    background: #fbf7f8;</span><br><span class="line">    margin: 2px;</span><br><span class="line">&#125;</span><br><span class="line">// 大代码块的自定义样式</span><br><span class="line">.highlight, pre &#123;</span><br><span class="line">    margin: 5px 0;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">&#125;</span><br><span class="line">.highlight, code, pre &#123;</span><br><span class="line">    border: 1px solid #d6d6d6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="支持mathjax公式"><a href="#支持mathjax公式" class="headerlink" title="支持mathjax公式"></a>支持mathjax公式<a id="section8.26"></a></h3><p>打开<strong>主题配置文件</strong>，搜索mathjax：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">    enable: true   #将false改为true</span><br><span class="line">    mhchem: false  #用来写化学方程式</span><br></pre></td></tr></table></figure></div>
<h3 id="图床网站"><a href="#图床网站" class="headerlink" title="图床网站"></a>图床网站<a id="section8.27"></a></h3><p>推荐七牛云，免费网站，快速，方便，或者可以看看这篇文章选一个合适的网站：<a class="link"   href="https://zhuanlan.zhihu.com/p/35270383" >软件小编：盘点一下免费好用的图床<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>网站：<a class="link"   href="https://link.zhihu.com/?target=https://www.qiniu.com/?utm_campaign=SEM&utm_content=pinzhuan&utm_medium=pinzhuan&utm_source=baiduSEM&utm_term=pinzhuan" >七牛云<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，后面我再写一篇关于如何注册使用七牛云存储图片的文章吧，我先研究研究。</p>
<h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索<a id="section8.28"></a></h3><p>打开cmd安装插件：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search</span><br></pre></td></tr></table></figure></div>
<p>查找主题配置文件themes&#x2F;next&#x2F;_config.yml中的local_search </p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: manual   #手动，按回车键或搜索按钮触发搜索</span><br></pre></td></tr></table></figure></div>
<h3 id="Hexo博客提交百度和Google收录"><a href="#Hexo博客提交百度和Google收录" class="headerlink" title="Hexo博客提交百度和Google收录"></a>Hexo博客提交百度和Google收录<a id="section8.29"></a></h3><p>这篇文章写得很详细：<a class="link"   href="https://link.zhihu.com/?target=https://www.jianshu.com/p/f8ec422ebd52" >Hexo博客提交百度和Google收录<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶<a id="section8.30"></a></h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在根目录Blog打开Git Bash，执行下面的命令：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure></div>
<h4 id="设置置顶标志"><a href="#设置置顶标志" class="headerlink" title="设置置顶标志"></a>设置置顶标志</h4><p>打开blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro目录下的post.swig文件，定位到&lt;div class&#x3D;”post-meta”&gt;标签下，插入如下代码：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="在文章中添加top"><a href="#在文章中添加top" class="headerlink" title="在文章中添加top"></a>在文章中添加top</h4><p>然后在需要置顶的文章的Front-matter中加上top: true即可，如下：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line"></span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure></div>
<h3 id="添加打赏"><a href="#添加打赏" class="headerlink" title="添加打赏"></a>添加打赏<a id="section8.31"></a></h3><h3 id="添加分享（未完成）"><a href="#添加分享（未完成）" class="headerlink" title="添加分享（未完成）"></a>添加分享（未完成）<a id="section8.32"></a></h3><h3 id="图片可点击放大查看，放大后可关闭（fancybox可能有点问题，暂时未实现）"><a href="#图片可点击放大查看，放大后可关闭（fancybox可能有点问题，暂时未实现）" class="headerlink" title="图片可点击放大查看，放大后可关闭（fancybox可能有点问题，暂时未实现）"></a>图片可点击放大查看，放大后可关闭（fancybox可能有点问题，暂时未实现）<a id="section8.33"></a></h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考<a id="section9"></a></h2><p><a class="link"   href="https://hexo.io/zh-cn/docs/themes.html" >主题 | Hexo<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://zhuanlan.zhihu.com/p/102592286" >从零开始搭建个人博客（超详细）<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://www.cnblogs.com/cscshi/p/15196114.html#:~:text=Hexo-NexT%20%E8%AE%BE%E7%BD%AE%E5%8D%9A%E5%AE%A2%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%201%201.%20%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%20%E5%B0%86%E6%83%B3%E8%A6%81%E7%9A%84%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E6%94%BE%E5%85%A5%20themes%2Fnext%2Fsource%2Fimages%E3%80%82%20%E6%89%93%E5%BC%80,%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BB%A5%E4%B8%8B%E5%86%85%E5%AE%B9%EF%BC%9A%20%2F%2F%E5%8D%9A%E5%AE%A2%E5%86%85%E5%AE%B9%E9%80%8F%E6%98%8E%E5%8C%96%20...%203%203.%20%E5%8F%82%E8%80%83%20Hexo-NexT%20%E8%AE%BE%E7%BD%AE%E5%8D%9A%E5%AE%A2%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87" >Hexo-NexT 设置博客背景图片 - 锦瑟，无端 - 博客园 (cnblogs.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://sagi-rastar.github.io/2023/11/10/%E5%85%B3%E4%BA%8E%E6%88%91%E4%BD%BF%E7%94%A8obsidian%E5%8A%A0hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/#collapse-2567a5ec9705eb7ac2c984033e06189d" >关于我使用obsidian加hexo部署个人博客的过程 - SagiRastar’s Blog (sagi-rastar.github.io)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://zhuanlan.zhihu.com/p/618864711" >Hexo+Next主题搭建个人博客+优化全过程（完整详细版） - 知乎 (zhihu.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><a class="link"   href="https://zhuanlan.zhihu.com/p/69211731" >Hexo 博客美化合集（不断更新） - 知乎 (zhihu.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <tags>
        <tag>个人博客</tag>
      </tags>
  </entry>
</search>
